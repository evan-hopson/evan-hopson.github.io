/**
 * @module MockRule
 */
import { OngoingRequest, Method, Explainable } from "../types";
import { Serializable, ClientServerChannel } from "../util/serialization";
import { MaybePromise } from '../util/type-utils';
export interface RequestMatcher extends Explainable, Serializable {
    type: keyof typeof MatcherLookup;
    matches(request: OngoingRequest): MaybePromise<boolean>;
}
export declare class WildcardMatcher extends Serializable implements RequestMatcher {
    readonly type = "wildcard";
    matches(): boolean;
    explain(): string;
}
export declare class MethodMatcher extends Serializable implements RequestMatcher {
    method: Method;
    readonly type = "method";
    constructor(method: Method);
    matches(request: OngoingRequest): boolean;
    explain(): string;
}
export declare class HostMatcher extends Serializable implements RequestMatcher {
    host: string;
    readonly type = "host";
    constructor(host: string);
    matches(request: OngoingRequest): boolean;
    explain(): string;
}
export declare class SimplePathMatcher extends Serializable implements RequestMatcher {
    path: string;
    readonly type = "simple-path";
    constructor(path: string);
    matches(request: OngoingRequest): boolean;
    explain(): string;
    serialize(channel: ClientServerChannel): {
        normalizedUrl: string;
    };
}
export declare class RegexPathMatcher extends Serializable implements RequestMatcher {
    readonly type = "regex-path";
    readonly regexSource: string;
    constructor(regex: RegExp);
    matches(request: OngoingRequest): boolean;
    explain(): string;
    serialize(channel: ClientServerChannel): {
        regexString: string;
    };
}
export declare class HeaderMatcher extends Serializable implements RequestMatcher {
    readonly type = "header";
    headers: {
        [key: string]: string;
    };
    constructor(headersInput: {
        [key: string]: string;
    });
    matches(request: OngoingRequest): boolean;
    explain(): string;
}
export declare class ExactQueryMatcher extends Serializable implements RequestMatcher {
    query: string;
    readonly type = "exact-query-string";
    constructor(query: string);
    matches(request: OngoingRequest): boolean;
    explain(): string;
}
export declare class QueryMatcher extends Serializable implements RequestMatcher {
    readonly type = "query";
    queryObject: {
        [key: string]: string | string[];
    };
    constructor(queryObjectInput: {
        [key: string]: string | number | (string | number)[];
    });
    matches(request: OngoingRequest): boolean;
    explain(): string;
}
export declare class FormDataMatcher extends Serializable implements RequestMatcher {
    formData: {
        [key: string]: string;
    };
    readonly type = "form-data";
    constructor(formData: {
        [key: string]: string;
    });
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare class RawBodyMatcher extends Serializable implements RequestMatcher {
    content: string;
    readonly type = "raw-body";
    constructor(content: string);
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare class RegexBodyMatcher extends Serializable implements RequestMatcher {
    readonly type = "raw-body-regexp";
    readonly regexString: string;
    constructor(regex: RegExp);
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare class JsonBodyMatcher extends Serializable implements RequestMatcher {
    body: {};
    readonly type = "json-body";
    constructor(body: {});
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare class JsonBodyFlexibleMatcher extends Serializable implements RequestMatcher {
    body: {};
    readonly type = "json-body-matching";
    constructor(body: {});
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare class CookieMatcher extends Serializable implements RequestMatcher {
    cookie: {
        [key: string]: string;
    };
    readonly type = "cookie";
    constructor(cookie: {
        [key: string]: string;
    });
    matches(request: OngoingRequest): Promise<boolean>;
    explain(): string;
}
export declare const MatcherLookup: {
    'wildcard': typeof WildcardMatcher;
    'method': typeof MethodMatcher;
    'host': typeof HostMatcher;
    'simple-path': typeof SimplePathMatcher;
    'regex-path': typeof RegexPathMatcher;
    'header': typeof HeaderMatcher;
    'query': typeof QueryMatcher;
    'exact-query-string': typeof ExactQueryMatcher;
    'form-data': typeof FormDataMatcher;
    'raw-body': typeof RawBodyMatcher;
    'raw-body-regexp': typeof RegexBodyMatcher;
    'json-body': typeof JsonBodyMatcher;
    'json-body-matching': typeof JsonBodyFlexibleMatcher;
    'cookie': typeof CookieMatcher;
};
export declare function matchesAll(req: OngoingRequest, matchers: RequestMatcher[]): Promise<boolean>;
export declare function explainMatchers(matchers: RequestMatcher[]): string;
