/**
 * @module MockRule
 */
/// <reference types="node" />
import { Duplex } from 'stream';
import { OngoingRequest, CompletedRequest, OngoingResponse, Explainable } from "../types";
import { Serialized } from '../util/serialization';
import { MaybePromise } from '../util/type-utils';
import * as matchers from "./matchers";
import * as handlers from "./handlers";
import * as completionCheckers from "./completion-checkers";
export interface MockRule extends Explainable {
    id: string;
    requests: Promise<CompletedRequest>[];
    matches(request: OngoingRequest): MaybePromise<boolean>;
    handle(request: OngoingRequest, response: OngoingResponse, record: boolean): Promise<void>;
    isComplete(): boolean | null;
}
export interface MockRuleData {
    id?: string;
    matchers: matchers.RequestMatcher[];
    handler: handlers.RequestHandler;
    completionChecker?: completionCheckers.RuleCompletionChecker;
}
export declare function serializeRuleData(data: MockRuleData, stream: Duplex): Serialized<MockRuleData>;
export declare function deserializeRuleData(data: Serialized<MockRuleData>, stream: Duplex): MockRuleData;
export declare class MockRule implements MockRule {
    private matchers;
    private handler;
    private completionChecker?;
    id: string;
    requests: Promise<CompletedRequest>[];
    requestCount: number;
    constructor(data: MockRuleData);
    explain(): string;
    dispose(): void;
}
