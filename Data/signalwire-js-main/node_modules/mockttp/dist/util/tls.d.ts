/**
 * @module TLS
 */
/// <reference types="node" />
export declare type CAOptions = (HttpsOptions | HttpsPathOptions);
export declare type HttpsOptions = {
    key: string;
    cert: string;
    keyLength?: number;
};
export declare type HttpsPathOptions = {
    keyPath: string;
    certPath: string;
    keyLength?: number;
};
export declare type PEM = string | string[] | Buffer | Buffer[];
export declare type GeneratedCertificate = {
    key: string;
    cert: string;
    ca: string;
};
/**
 * Generate a CA certificate for mocking HTTPS.
 *
 * Returns a promise, for an object with key and cert properties,
 * containing the generated private key and certificate in PEM format.
 *
 * These can be saved to disk, and their paths passed
 * as HTTPS options to a Mockttp server.
 */
export declare function generateCACertificate(options?: {
    commonName?: string;
    bits?: number;
}): Promise<{
    key: string;
    cert: string;
}>;
export declare function generateSPKIFingerprint(certPem: PEM): string;
export declare function getCA(options: CAOptions): Promise<CA>;
export declare class CA {
    private caCert;
    private caKey;
    private certCache;
    constructor(caKey: PEM, caCert: PEM, keyLength: number);
    generateCertificate(domain: string): GeneratedCertificate;
}
