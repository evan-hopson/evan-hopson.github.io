/**
 * @module Internal
 */
/// <reference types="node" />
import * as stream from 'stream';
import * as express from 'express';
import { Headers, OngoingRequest, CompletedRequest, OngoingResponse, CompletedResponse, CompletedBody, TimingEvents, InitiatedRequest } from "../types";
export declare const isAbsoluteUrl: (url: string) => boolean;
export declare const isRelativeUrl: (url: string) => boolean;
export declare const isAbsoluteProtocollessUrl: (url: string) => boolean;
export declare const getUrlWithoutProtocol: (url: string) => string;
export declare const getPathFromAbsoluteUrl: (url: string) => string;
export declare const shouldKeepAlive: (req: OngoingRequest) => boolean;
export declare const setHeaders: (response: express.Response, headers: Headers) => void;
declare type BufferInProgress = Promise<Buffer> & {
    currentChunks: Buffer[];
    failedWith?: Error;
};
export declare const streamToBuffer: (input: stream.Readable) => BufferInProgress;
export declare const handleContentEncoding: (body: Buffer, encoding?: string | string[] | undefined) => Buffer;
export declare const buildBodyReader: (body: Buffer, headers: Headers) => CompletedBody;
export declare const parseBody: (req: express.Request<import("express-serve-static-core").ParamsDictionary>, _res: express.Response, next: express.NextFunction) => void;
export declare function buildInitiatedRequest(request: OngoingRequest): InitiatedRequest;
export declare function buildAbortedRequest(request: OngoingRequest): InitiatedRequest;
export declare function waitForCompletedRequest(request: OngoingRequest): Promise<CompletedRequest>;
export declare function trackResponse(response: express.Response, timingEvents: TimingEvents, tags: string[]): OngoingResponse;
export declare function waitForCompletedResponse(response: OngoingResponse): Promise<CompletedResponse>;
export {};
