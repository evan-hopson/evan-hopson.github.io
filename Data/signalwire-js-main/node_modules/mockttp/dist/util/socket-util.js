"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const os = require("os");
const net = require("net");
const util_1 = require("./util");
// Grab the first byte of a stream
// Note that this isn't a great abstraction: you might
// need to manually resume() the stream afterwards.
function peekFirstByte(socket) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve) => {
            socket.once('data', (data) => {
                socket.pause();
                socket.unshift(data);
                resolve(data[0]);
            });
        });
    });
}
exports.peekFirstByte = peekFirstByte;
function mightBeTLSHandshake(byte) {
    return byte === 22;
}
exports.mightBeTLSHandshake = mightBeTLSHandshake;
// Test if a local port for a given interface (IPv4/6) is currently in use
function isLocalPortActive(interfaceIp, port) {
    return __awaiter(this, void 0, void 0, function* () {
        if (interfaceIp === '::1' && !exports.isLocalIPv6Available)
            return false;
        return new Promise((resolve) => {
            const server = net.createServer();
            server.listen({
                host: interfaceIp,
                port,
                ipv6Only: interfaceIp === '::1'
            });
            server.once('listening', () => {
                resolve(false);
                server.close(() => { });
            });
            server.once('error', (e) => {
                resolve(true);
            });
        });
    });
}
exports.isLocalPortActive = isLocalPortActive;
// This file imported in browsers etc as it's used in handlers, but none of these methods are used
// directly. It is useful though to guard sections that immediately perform actions:
exports.isLocalIPv6Available = util_1.isNode
    ? _.some(os.networkInterfaces(), (addresses) => _.some(addresses, a => a.address === '::1'))
    : true;
//# sourceMappingURL=socket-util.js.map