/// <reference types="node" />
import { Duplex } from 'stream';
import { MaybePromise, Replace } from './type-utils';
import { CompletedBody, Headers } from '../types';
export declare function serialize<T extends Serializable>(obj: T, stream: Duplex): SerializedValue<T>;
export declare function deserialize<T extends SerializedValue<Serializable>, C extends {
    new (...args: any): any;
    deserialize(data: SerializedValue<any>, channel: ClientServerChannel): any;
}>(data: T, stream: Duplex, lookup: {
    [key: string]: C;
}): InstanceType<C>;
declare type SerializedValue<T> = T & {
    topicId: string;
};
export declare type Serialized<T> = {
    [K in keyof T]: T[K] extends string | undefined ? string | undefined : T[K] extends Array<unknown> ? Array<SerializedValue<T[K][0]>> : SerializedValue<T[K]>;
};
export declare abstract class Serializable {
    abstract type: string;
    serialize(_channel: ClientServerChannel): unknown;
    static deserialize(data: SerializedValue<any>, _channel: ClientServerChannel): any;
    dispose(): void;
}
interface Message {
    topicId?: string;
}
export declare class ClientServerChannel extends Duplex {
    private rawStream;
    readonly topicId: string;
    constructor(rawStream: Duplex, topicId?: string);
    _write(message: Message, encoding: string, callback: (error?: Error | null) => void): void;
    _readFromRawStream: (rawData: any) => void;
    private reading;
    _read(): void;
    request<T extends {}, R>(data: T): Promise<R>;
    request<T extends {}, R>(action: string, data: T): Promise<R>;
    onRequest<T, R>(cb: (request: T) => MaybePromise<R>): void;
    onRequest<T, R>(actionName: string, cb: (request: T) => MaybePromise<R>): void;
    dispose(): void;
}
export declare function serializeBuffer(buffer: Buffer): string;
export declare function deserializeBuffer(buffer: string): Buffer;
export declare function withSerializedBodyReader<T extends {
    body: CompletedBody;
}>(input: T): Replace<T, 'body', string>;
export declare function withDeserializedBodyReader<T extends {
    headers: Headers;
    body: CompletedBody;
}>(input: Replace<T, 'body', string>): T;
export declare function withSerializedBodyBuffer<T extends {
    body?: CompletedBody | Buffer | ArrayBuffer | string;
}>(input: T): Replace<T, 'body', string | undefined>;
export declare type WithSerializedBodyBuffer<T extends {
    body?: any;
}> = Replace<T, 'body', string | undefined>;
export declare function withDeserializedBodyBuffer<T extends {
    headers?: Headers;
    body?: Buffer | string | undefined;
}>(input: Replace<T, 'body', string | undefined>): T;
export {};
