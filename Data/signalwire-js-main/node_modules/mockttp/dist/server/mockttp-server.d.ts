/**
 * @module Mockttp
 */
import { CompletedRequest, CompletedResponse, TlsRequest, InitiatedRequest } from "../types";
import { Mockttp, AbstractMockttp, MockttpOptions, PortRange } from "../mockttp";
import { MockRuleData } from "../rules/mock-rule";
import { MockedEndpoint } from "./mocked-endpoint";
/**
 * A in-process Mockttp implementation. This starts servers on the local machine in the
 * current process, and exposes methods to directly manage them.
 *
 * This class does not work in browsers, as it expects to be able to start HTTP servers.
 */
export default class MockttpServer extends AbstractMockttp implements Mockttp {
    private rules;
    private httpsOptions;
    private app;
    private server;
    private eventEmitter;
    private readonly initialDebugSetting;
    constructor(options?: MockttpOptions);
    start(portParam?: number | PortRange): Promise<void>;
    stop(): Promise<void>;
    enableDebug(): void;
    reset(): void;
    get mockedEndpoints(): MockedEndpoint[];
    private get address();
    get url(): string;
    get port(): number;
    setRules: (...ruleData: MockRuleData[]) => Promise<MockedEndpoint[]>;
    addRules: (...ruleData: MockRuleData[]) => Promise<MockedEndpoint[]>;
    on(event: 'request-initiated', callback: (req: InitiatedRequest) => void): Promise<void>;
    on(event: 'request', callback: (req: CompletedRequest) => void): Promise<void>;
    on(event: 'response', callback: (req: CompletedResponse) => void): Promise<void>;
    on(event: 'abort', callback: (req: InitiatedRequest) => void): Promise<void>;
    on(event: 'tlsClientError', callback: (req: TlsRequest) => void): Promise<void>;
    private announceInitialRequestAsync;
    private announceCompletedRequestAsync;
    private announceResponseAsync;
    private announceAbortAsync;
    private announceTlsErrorAsync;
    private handleRequest;
    private isComplete;
    private sendUnmatchedRequestError;
    private explainRequest;
    private suggestRule;
}
