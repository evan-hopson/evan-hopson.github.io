"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module Mockttp
 */
const common_tags_1 = require("common-tags");
const mock_rule_builder_1 = require("./rules/mock-rule-builder");
const types_1 = require("./types");
/**
 * @hidden
 */
class AbstractMockttp {
    constructor(options) {
        this.addRule = (rule) => this.addRules(rule).then((rules) => rules[0]);
        this.debug = options.debug || false;
        this.cors = options.cors || false;
        this.recordTraffic = options.recordTraffic !== undefined
            ? options.recordTraffic
            : true;
        this.suggestChanges = options.suggestChanges !== undefined
            ? options.suggestChanges
            : true;
    }
    get proxyEnv() {
        return {
            HTTP_PROXY: this.url,
            HTTPS_PROXY: this.url
        };
    }
    urlFor(path) {
        return this.url + path;
    }
    anyRequest() {
        return new mock_rule_builder_1.default(this.addRule);
    }
    get(url) {
        return new mock_rule_builder_1.default(types_1.Method.GET, url, this.addRule);
    }
    post(url) {
        return new mock_rule_builder_1.default(types_1.Method.POST, url, this.addRule);
    }
    put(url) {
        return new mock_rule_builder_1.default(types_1.Method.PUT, url, this.addRule);
    }
    delete(url) {
        return new mock_rule_builder_1.default(types_1.Method.DELETE, url, this.addRule);
    }
    patch(url) {
        return new mock_rule_builder_1.default(types_1.Method.PATCH, url, this.addRule);
    }
    head(url) {
        return new mock_rule_builder_1.default(types_1.Method.HEAD, url, this.addRule);
    }
    options(url) {
        if (this.cors) {
            throw new Error(common_tags_1.stripIndent `
                Cannot mock OPTIONS requests with CORS enabled.

                You can disable CORS by passing { cors: false } to getLocal/getRemote, but this may cause issues ${''}connecting to your mock server from browsers, unless you mock all required OPTIONS preflight ${''}responses by hand.
            `);
        }
        return new mock_rule_builder_1.default(types_1.Method.OPTIONS, url, this.addRule);
    }
}
exports.AbstractMockttp = AbstractMockttp;
//# sourceMappingURL=mockttp.js.map